{"version":3,"file":"index.js","sources":["../src/version.ts","../src/server-manager/index.ts","../src/client-manager/index.ts"],"sourcesContent":["export default '1.0.0';\n","import path from 'path';\nrequire('dotenv').config({path: process.env.DOTENV_CONFIG_PATH || path.resolve(process.cwd(), '.env')});\n\nimport ShortUniqueId from 'short-unique-id';\nimport * as jwt from 'jsonwebtoken';\n\nimport {ServerOptions} from './interfaces';\n\nlet idDict = new Array(94);\nfor (let i = 93; i >= 0; i -= 1) idDict[i] = String.fromCharCode(i + 33);\nconst uid = new ShortUniqueId({\n  dictionary: idDict,\n  length: 64,\n});\n\nexport default class ServerJWTSessionManager {\n  serverOptions: ServerOptions = {\n    autoGenerateSecret: true,\n    validateRequestHandler: async (validationData: any) => false,\n    storeSessionKeyHandler: async (sessionKey: string) => '',\n    validateSessionKeyInStoreHandler: async () => false,\n  };\n\n  secretStorePromise: Promise<void>;\n\n  get secret(): string {\n    return this.serverOptions.secret;\n  }\n\n  generateSecret = (): string => {\n    // With the provided dictionary and given the 64 character length,\n    // this library can generate this amount of unique secrets:\n    // 1,906,262,174,603,609,088,576,616,448,880,496,376,736,472,440,472,536,824,976,488,112,704,264,624,800,304,704,624,848,640,656,728,592,472,800,216,888,232,600,112,440,440\n    // (one unquadragintillion nine hundred six quadragintillion two hundred sixty-two novemtrigintillion one hundred seventy-four octotrigintillion six hundred three septentrigintillion six hundred nine sextrigintillion eighty-eight quintrigintillion five hundred seventy-six quattuortrigintillion six hundred sixteen trestrigintillion four hundred forty-eight duotrigintillion eight hundred eighty untrigintillion four hundred ninety-six trigintillion three hundred seventy-six novemvigintillion seven hundred thirty-six octovigintillion four hundred seventy-two septenvigintillion four hundred forty sexvigintillion four hundred seventy-two quinvigintillion five hundred thirty-six quattuorvigintillion eight hundred twenty-four trevigintillion nine hundred seventy-six duovigintillion four hundred eighty-eight unvigintillion one hundred twelve vigintillion seven hundred four novemdecillion two hundred sixty-four octodecillion six hundred twenty-four septendecillion eight hundred sexdecillion three hundred four quindecillion seven hundred four quattuordecillion six hundred twenty-four tredecillion eight hundred forty-eight duodecillion six hundred forty undecillion six hundred fifty-six decillion seven hundred twenty-eight nonillion five hundred ninety-two octillion four hundred seventy-two septillion eight hundred sextillion two hundred sixteen quintillion eight hundred eighty-eight quadrillion two hundred thirty-two trillion six hundred billion one hundred twelve million four hundred forty thousand four hundred forty)\n    //\n    // This means the approximate probability of duplicate secrets being generetade is of\n    // 1 in 1,730,418,915,111,425,280,952,848,056,848,216,368,208,136,360,064,800,224,464,872,000\n    return uid();\n  };\n\n  constructor(options: ServerOptions) {\n    const envOptions: ServerOptions = {\n      ...this.serverOptions,\n      secret: process.env.SESSION_MANAGER_SECRET,\n    };\n\n    this.serverOptions = {\n      ...envOptions,\n      ...options,\n    };\n\n    if (!this.serverOptions.secret && this.serverOptions.autoGenerateSecret) {\n      this.serverOptions.secret = this.generateSecret();\n    } else if (!this.serverOptions.autoGenerateSecret) {\n      throw new Error('Invalid Secret!');\n    }\n\n    this.serverOptions.storeSecretHandler\n    && (this.secretStorePromise = this.serverOptions.storeSecretHandler(this.secret));\n  }\n\n  generateSessionRequestToken = (expirySeconds: number = 60 * 2): string => {\n    return jwt.sign({\n      exp: Math.floor(Date.now() / 1000) + expirySeconds,\n    }, this.secret);\n  };\n\n  checkSessionRequestToken = (sessionRequestToken: string): boolean => {\n    try {\n      jwt.verify(sessionRequestToken, this.secret);\n      return true;\n    } catch(e) {\n      return false;\n    }\n  };\n\n  generateSessionToken = (sessionKey: string | null) => {\n    return (\n      !sessionKey && null\n    ) || jwt.sign({\n      data: sessionKey,\n    }, this.secret);\n  };\n\n  processSessionRequest = async (sessionRequestToken: string, validationData: any): Promise<string | null> => {\n    const {\n      checkSessionRequestToken,\n      generateSecret,\n      generateSessionToken,\n      serverOptions,\n    } = this;\n\n    const {\n      validateRequestHandler,\n      storeSessionKeyHandler,\n    } = serverOptions;\n\n    return (\n      checkSessionRequestToken(sessionRequestToken)\n      && await validateRequestHandler(validationData)\n      && generateSessionToken(await storeSessionKeyHandler(generateSecret(), validationData).catch((e) => null))\n    ) || null;\n  };\n\n  checkSessionToken = async (sessionToken: string, extraValidationData?: any): Promise<boolean> => {\n    try {\n      const {\n        validateSessionKeyInStoreHandler,\n      } = this.serverOptions;\n\n      const {data: sessionKey} = jwt.verify(sessionToken, this.secret) as {data: string};\n\n      return validateSessionKeyInStoreHandler(sessionKey, extraValidationData)\n    } catch (e) {\n      return false;\n    }\n  };\n};\n","import {\n  ClientOptions, ClientState\n} from './interfaces';\n\nexport default class ClientJWTSessionManager {\n  state: ClientState = {\n    sessionToken: null,\n  };\n\n  clientOptions: ClientOptions = {\n    getSessionRequestTokenHandler: async () => '',\n    getSessionHandler: async () => '',\n  };\n\n  constructor(options: ClientOptions, restoreState?: ClientState) {\n    this.clientOptions = {\n      ...this.clientOptions,\n      ...options,\n    };\n\n    restoreState\n    && this.setState(restoreState);\n  }\n\n  setState = (newState: ClientState) => {\n    const prevState: ClientState = this.state;\n\n    this.state = {\n      ...prevState,\n      ...newState,\n    };\n  };\n\n  getSessionRequestToken = async (): Promise<void> => {\n    const {\n      clientOptions,\n      setState,\n    } = this;\n\n    const {\n      getSessionRequestTokenHandler,\n      storeSessionRequestTokenHandler,\n    } = clientOptions;\n\n    const requestTokenResponse = await getSessionRequestTokenHandler().catch((e) => {throw e;});\n\n    setState({\n      sessionRequestToken: requestTokenResponse,\n    });\n\n    storeSessionRequestTokenHandler\n    && await storeSessionRequestTokenHandler(this.state.sessionRequestToken).catch((e) => {throw e;});\n\n    return;\n  };\n\n  get sessionToken(): string {\n    return this.state.sessionToken;\n  };\n\n  getSession = async (): Promise<void> => {\n    const {\n      clientOptions,\n      getSessionRequestToken,\n      setState,\n    } = this;\n\n    const {\n      getSessionHandler,\n      storeSessionTokenHandler,\n    } = clientOptions;\n\n    if (!this.state.sessionRequestToken) {\n      await getSessionRequestToken();\n    }\n\n    const sessionToken = await getSessionHandler(this.state.sessionRequestToken).catch(async (error) => {\n      if (error.name !== 'TokenExpiredError') {\n        throw error;\n      }\n\n      // If token is expired simply retry once as it may be an invalid stored token\n      await getSessionRequestToken().catch((e) => {throw e;});\n\n      return await getSessionHandler(this.state.sessionRequestToken).catch((e) => {throw e;});\n    }).catch((e) => {throw e;});\n\n    setState({\n      sessionToken\n    });\n\n    storeSessionTokenHandler\n    && await storeSessionTokenHandler(this.sessionToken).catch((e) => {throw e;});\n\n    return;\n  };\n\n  closeSession = async (): Promise<void> => {\n    const {\n      clientOptions,\n      setState,\n    } = this;\n\n    const {\n      closeSessionHandler,\n    } = clientOptions;\n\n    closeSessionHandler\n    && await closeSessionHandler(this.sessionToken).catch((e) => {throw e;});\n\n    setState({\n      sessionToken: null,\n    });\n\n    return;\n  };\n};\n"],"names":["jwt.sign","jwt.verify"],"mappings":";;;;;;;;;;AAAA,cAAe,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCtB,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,EAAC,CAAC,CAAC;AAOxG,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAC3B,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;IAAE,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AACzE,IAAM,GAAG,GAAG,IAAI,aAAa,CAAC;IAC5B,UAAU,EAAE,MAAM;IAClB,MAAM,EAAE,EAAE;CACX,CAAC,CAAC;;IA2BD,iCAAY,OAAsB;QAAlC,iBAmBC;QA3CD,kBAAa,GAAkB;YAC7B,kBAAkB,EAAE,IAAI;YACxB,sBAAsB,EAAE,UAAO,cAAmB;gBAAK,sBAAA,KAAK,EAAA;qBAAA;YAC5D,sBAAsB,EAAE,UAAO,UAAkB;gBAAK,sBAAA,EAAE,EAAA;qBAAA;YACxD,gCAAgC,EAAE;gBAAY,sBAAA,KAAK,EAAA;qBAAA;SACpD,CAAC;QAQF,mBAAc,GAAG;;;;;;;;YAQf,OAAO,GAAG,EAAE,CAAC;SACd,CAAC;QAuBF,gCAA2B,GAAG,UAAC,aAA8B;YAA9B,8BAAA,EAAA,gBAAwB,EAAE,GAAG,CAAC;YAC3D,OAAOA,QAAQ,CAAC;gBACd,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,aAAa;aACnD,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;SACjB,CAAC;QAEF,6BAAwB,GAAG,UAAC,mBAA2B;YACrD,IAAI;gBACFC,UAAU,CAAC,mBAAmB,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;gBAC7C,OAAO,IAAI,CAAC;aACb;YAAC,OAAM,CAAC,EAAE;gBACT,OAAO,KAAK,CAAC;aACd;SACF,CAAC;QAEF,yBAAoB,GAAG,UAAC,UAAyB;YAC/C,OAAO,CACL,CAAC,UAAU,IAAI,IAAI,KAChBD,QAAQ,CAAC;gBACZ,IAAI,EAAE,UAAU;aACjB,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;SACjB,CAAC;QAEF,0BAAqB,GAAG,UAAO,mBAA2B,EAAE,cAAmB;;;;;wBACvE,KAKF,IAAI,EAJN,wBAAwB,8BAAA,EACxB,cAAc,oBAAA,EACd,oBAAoB,0BAAA,EACpB,aAAa,mBAAA,CACN;wBAGP,sBAAsB,GAEpB,aAAa,uBAFO,EACtB,sBAAsB,GACpB,aAAa,uBADO,CACN;wBAGhB,KAAA,wBAAwB,CAAC,mBAAmB,CAAC,CAAA;iCAA7C,wBAA6C;wBAC1C,qBAAM,sBAAsB,CAAC,cAAc,CAAC,EAAA;;8BAA5C,SAA4C;;;wBAD/C,QAC+C;iCAD/C,wBAC+C;wBAC5C,KAAA,oBAAoB,CAAA;wBAAC,qBAAM,sBAAsB,CAAC,cAAc,EAAE,EAAE,cAAc,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAK,OAAA,IAAI,GAAA,CAAC,EAAA;;wBAAtG,KAAA,kBAAqB,SAAiF,EAAC,CAAA;;4BAH5G,sBAAO,QAIF,IAAI,EAAC;;;aACX,CAAC;QAEF,sBAAiB,GAAG,UAAO,YAAoB,EAAE,mBAAyB;;;gBACxE,IAAI;oBAEA,gCAAgC,GAC9B,IAAI,CAAC,aAAa,iCADY,CACX;oBAEV,UAAU,GAAIC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAmB,KAA3D,CAA4D;oBAEnF,sBAAO,gCAAgC,CAAC,UAAU,EAAE,mBAAmB,CAAC,EAAA;iBACzE;gBAAC,OAAO,CAAC,EAAE;oBACV,sBAAO,KAAK,EAAC;iBACd;;;aACF,CAAC;QA3EA,IAAM,UAAU,yBACX,IAAI,CAAC,aAAa,KACrB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAC3C,CAAC;QAEF,IAAI,CAAC,aAAa,yBACb,UAAU,GACV,OAAO,CACX,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE;YACvE,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;SACnD;aAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE;YACjD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACpC;QAED,IAAI,CAAC,aAAa,CAAC,kBAAkB;gBACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KACnF;IAlCD,sBAAI,2CAAM;aAAV;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;SAClC;;;OAAA;IA0FH,8BAAC;AAAD,CAAC;;;ICvGC,iCAAY,OAAsB,EAAE,YAA0B;QAA9D,iBAQC;QAjBD,UAAK,GAAgB;YACnB,YAAY,EAAE,IAAI;SACnB,CAAC;QAEF,kBAAa,GAAkB;YAC7B,6BAA6B,EAAE;gBAAY,sBAAA,EAAE,EAAA;qBAAA;YAC7C,iBAAiB,EAAE;gBAAY,sBAAA,EAAE,EAAA;qBAAA;SAClC,CAAC;QAYF,aAAQ,GAAG,UAAC,QAAqB;YAC/B,IAAM,SAAS,GAAgB,KAAI,CAAC,KAAK,CAAC;YAE1C,KAAI,CAAC,KAAK,yBACL,SAAS,GACT,QAAQ,CACZ,CAAC;SACH,CAAC;QAEF,2BAAsB,GAAG;;;;;wBACjB,KAGF,IAAI,EAFN,aAAa,mBAAA,EACb,QAAQ,cAAA,CACD;wBAGP,6BAA6B,GAE3B,aAAa,8BAFc,EAC7B,+BAA+B,GAC7B,aAAa,gCADgB,CACf;wBAEW,qBAAM,6BAA6B,EAAE,CAAC,KAAK,CAAC,UAAC,CAAC,IAAM,MAAM,CAAC,CAAC,EAAC,CAAC,EAAA;;wBAArF,oBAAoB,GAAG,SAA8D;wBAE3F,QAAQ,CAAC;4BACP,mBAAmB,EAAE,oBAAoB;yBAC1C,CAAC,CAAC;wBAEH,KAAA,+BAA+B,CAAA;iCAA/B,wBAA+B;wBAC5B,qBAAM,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAM,MAAM,CAAC,CAAC,EAAC,CAAC,EAAA;;8BAA9F,SAA8F;;;wBAEjG,sBAAO;;;aACR,CAAC;QAMF,eAAU,GAAG;;;;;;wBACL,KAIF,IAAI,EAHN,aAAa,mBAAA,EACb,sBAAsB,4BAAA,EACtB,QAAQ,cAAA,CACD;wBAGP,iBAAiB,GAEf,aAAa,kBAFE,EACjB,wBAAwB,GACtB,aAAa,yBADS,CACR;6BAEd,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAA/B,wBAA+B;wBACjC,qBAAM,sBAAsB,EAAE,EAAA;;wBAA9B,SAA8B,CAAC;;4BAGZ,qBAAM,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,UAAO,KAAK;;;;wCAC7F,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE;4CACtC,MAAM,KAAK,CAAC;yCACb;;wCAGD,qBAAM,sBAAsB,EAAE,CAAC,KAAK,CAAC,UAAC,CAAC,IAAM,MAAM,CAAC,CAAC,EAAC,CAAC,EAAA;;;wCAAvD,SAAuD,CAAC;wCAEjD,qBAAM,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAM,MAAM,CAAC,CAAC,EAAC,CAAC,EAAA;4CAAvF,sBAAO,SAAgF,EAAC;;;6BACzF,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAM,MAAM,CAAC,CAAC,EAAC,CAAC,EAAA;;wBATrB,YAAY,GAAG,SASM;wBAE3B,QAAQ,CAAC;4BACP,YAAY,cAAA;yBACb,CAAC,CAAC;wBAEH,KAAA,wBAAwB,CAAA;iCAAxB,wBAAwB;wBACrB,qBAAM,wBAAwB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAM,MAAM,CAAC,CAAC,EAAC,CAAC,EAAA;;8BAA1E,SAA0E;;;wBAE7E,sBAAO;;;aACR,CAAC;QAEF,iBAAY,GAAG;;;;;wBACP,KAGF,IAAI,EAFN,aAAa,mBAAA,EACb,QAAQ,cAAA,CACD;wBAGP,mBAAmB,GACjB,aAAa,oBADI,CACH;wBAElB,KAAA,mBAAmB,CAAA;iCAAnB,wBAAmB;wBAChB,qBAAM,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAM,MAAM,CAAC,CAAC,EAAC,CAAC,EAAA;;8BAArE,SAAqE;;;wBAExE,QAAQ,CAAC;4BACP,YAAY,EAAE,IAAI;yBACnB,CAAC,CAAC;wBAEH,sBAAO;;;aACR,CAAC;QApGA,IAAI,CAAC,aAAa,yBACb,IAAI,CAAC,aAAa,GAClB,OAAO,CACX,CAAC;QAEF,YAAY;eACT,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;KAChC;IAkCD,sBAAI,iDAAY;aAAhB;YACE,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;SAChC;;;OAAA;IA0DH,8BAAC;AAAD,CAAC;;;;;;"}